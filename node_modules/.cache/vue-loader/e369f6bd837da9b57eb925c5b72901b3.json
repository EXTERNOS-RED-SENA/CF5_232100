{"remainingRequest":"/home/runner/work/CF5_232100/CF5_232100/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/CF5_232100/CF5_232100/src/views/Tema4.vue?vue&type=template&id=8a7a7472&lang=pug","dependencies":[{"path":"/home/runner/work/CF5_232100/CF5_232100/src/views/Tema4.vue","mtime":1734306896331},{"path":"/home/runner/work/CF5_232100/CF5_232100/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF5_232100/CF5_232100/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF5_232100/CF5_232100/node_modules/babel-loader/lib/index.js","mtime":456789000000},{"path":"/home/runner/work/CF5_232100/CF5_232100/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/CF5_232100/CF5_232100/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/CF5_232100/CF5_232100/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF5_232100/CF5_232100/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}